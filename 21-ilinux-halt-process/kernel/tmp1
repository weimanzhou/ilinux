PRIVATE void init_mul_process_by_me() {
	register process_t* process;
    register int logic_nr;
	for(process = BEG_PROC_ADDR, logic_nr = -NR_TASKS; process < END_PROC_ADDR; process++, logic_nr++) {
		if(logic_nr > 0) memcpy(process->name, "unused", 6);
		process->logic_nr = logic_nr;
		p_proc_addr[logic_nr_2_index(logic_nr)] = process;
	}

	sys_proc_t* sys_proc;
	reg_t sys_proc_stack_base = (reg_t) sys_proc_stack;
	u8_t privilege;
	u8_t rpl;
	for (logic_nr = -NR_TASKS; logic_nr <= LOW_USER; logic_nr++) {
		// 拿到系统进程对应应该放在的进程指针
		process = proc_addr(logic_nr);
		// 拿到系统进程的指针
		sys_proc = &sys_proc_table[logic_nr_2_index(logic_nr)];
		// memcpy(process->name, sys_proc->name, 6);
		// 判断是否是系统任务还是系统服务
		if(logic_nr < 0) { // 系统任务
			process->priority = PROC_PRI_TASK;
			rpl = privilege =  TASK_PRIVILEGE;
		} else {			// 系统服务
			process->priority = PROC_PRI_SERVER;
			rpl = privilege = SERVER_PRIVILEGE;
		}
		// 堆栈基地址 + 分配的大小 == 栈顶
		sys_proc_stack_base += sys_proc->stack_size;

		process->ldt[CS_LDT_INDEX] = gdt[TEXT_INDEX];
		process->ldt[DS_LDT_INDEX] = gdt[DATA_INDEX];
		process->ldt[CS_LDT_INDEX].access = (DA_CR | (privilege << 5));
		process->ldt[DS_LDT_INDEX].access = (DA_DRW | (privilege << 5));
		process->map.base = KERNEL_TEXT_SEG_BASE;
		process->map.size = 0;
		process->regs.cs = ((CS_LDT_INDEX * DESCRIPTOR_SIZE) | SA_TIL | rpl);
		process->regs.ds = ((DS_LDT_INDEX * DESCRIPTOR_SIZE) | SA_TIL | rpl);
		process->regs.es = process->regs.fs = process->regs.ss = process->regs.ds;			
		process->regs.gs = (SELECTOR_KERNEL_GS & SA_RPL_MASK | rpl);
		process->regs.eip = (reg_t) sys_proc->initial_eip;
		process->regs.esp = sys_proc_stack_base;
		process->regs.eflags = is_task_proc(process) ? INIT_TASK_PSW : INIT_PSW;

		process->flags = CLEAN_MAP;
	}

}
